name: Deploy to Cloud Run from Source

on:
  push:
    branches: ["main"] # This workflow is triggered when a push is made to the "main" branch

env:
  PROJECT_ID: romodo-fleets # Google Cloud project id
  SERVICE: fleet-manager # Cloud Run service name
  REGION: asia-northeast2 # Cloud Run service region

jobs:
  setup:
    runs-on: ubuntu-latest # This job runs on an Ubuntu latest environment
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2 # This action sets up a Node.js environment
        with:
          node-version-file: ./package.json
          cache-dependency-path: ./package-lock.json
      - name: Setup Go environment
        uses: actions/setup-go@v5.0.0 # This action sets up a Go environment

  build:
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Vite Github Pages Deployer
        uses: skywarth/vite-github-pages-deployer@v1.3.0 # This action deploys your Vite app to GitHub Pages
      - name: Install Dependencies
        run: npm install # This command installs the required dependencies
        working-directory: ${{ env.build_path }}
      - run: npm run build # This command builds your Node.js app
        env:
          build_path: ./romodo-fleet-manager/
          base: ./romodo-fleet-manager/
      - run: mkdir -p ./artifacts # This command creates a directory for build artifacts
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.3.1 # This action uploads build artifacts
        with:
          name: gh-build-artifact
          path: ./artifacts/
          retention-days: 3
          overwrite: false

  deploy:
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2 # This action checks out your repository
      - name: Decode GCP credentials
        id: decode
        run: echo "${{ secrets.GCP_CREDENTIALS }}" | base64 --decode > gcp_credentials.json # This command decodes your GCP credentials
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2.1.1 # This action authenticates to Google Cloud
        with:
          credentials_json: ${{ steps.decode.outputs.gcp_credentials }}
      - name: Deploy to Cloud Run
        id: deploy
        uses: "google-github-actions/deploy-cloudrun@v2" # This action deploys your app to Cloud Run
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          source: ./
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }} # This command prints the URL of your deployed app
